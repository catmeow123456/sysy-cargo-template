use crate::ast::{Stmt, Block, FuncType, FuncDef, CompUnit, UnaryOp, Exp, BinaryOp};

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*.*\*/" => {},    // 匹配 /* ... */
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Box<Exp> = <lorexp: LOrExp> => <>;

PrimaryExp: Box<Exp> = {
  <num: Number> => Box::new(Exp::Number{ <> }),
  "(" <exp: Exp> ")" => <>,
}

UnaryExp: Box<Exp> = {
  <primaryexp: PrimaryExp> => <>,
  <op: UnaryOp> <unaryexp: UnaryExp> =>
    Box::new(Exp::UnaryExp {
      op: op,
      exp: unaryexp
    }),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

MulExp: Box<Exp> = {
  <unaryexp: UnaryExp> => <>,
  <mulexp: MulExp> "*" <unaryexp: UnaryExp> => Box::new(Exp::BinaryExp {
    lhs: mulexp,
    op: BinaryOp::Mul,
    rhs: unaryexp,
  }),
  <mulexp: MulExp> "/" <unaryexp: UnaryExp> => Box::new(Exp::BinaryExp {
    lhs: mulexp,
    op: BinaryOp::Div,
    rhs: unaryexp,
  }),
  <mulexp: MulExp> "%" <unaryexp: UnaryExp> => Box::new(Exp::BinaryExp {
    lhs: mulexp,
    op: BinaryOp::Mod,
    rhs: unaryexp,
  }),
}

AddExp: Box<Exp> = {
  <mulexp: MulExp> => <>,
  <addexp: AddExp> "+" <mulexp: MulExp> => Box::new(Exp::BinaryExp {
    lhs: addexp,
    op: BinaryOp::Add,
    rhs: mulexp,
  }),
  <addexp: AddExp> "-" <mulexp: MulExp> => Box::new(Exp::BinaryExp {
    lhs: addexp,
    op: BinaryOp::Sub,
    rhs: mulexp,
  }),
}

RelExp: Box<Exp> = {
  <addexp: AddExp> => <>,
  <relexp: RelExp> <op: RelOp> <addexp: AddExp> => Box::new(Exp::BinaryExp {
    lhs: relexp,
    op: op,
    rhs: addexp,
  }),
}

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
}

EqExp: Box<Exp> = {
  <relexp: RelExp> => <>,
  <eqexp: EqExp> "==" <relexp: RelExp> => Box::new(Exp::BinaryExp {
    lhs: eqexp,
    op: BinaryOp::Eq,
    rhs: relexp,
  }),
  <eqexp: EqExp> "!=" <relexp: RelExp> => Box::new(Exp::BinaryExp {
    lhs: eqexp,
    op: BinaryOp::Ne,
    rhs: relexp,
  }),
}

LAndExp: Box<Exp> = {
  <eqexp: EqExp> => <>,
  <landexp: LAndExp> "&&" <eqexp: EqExp> => Box::new(Exp::BinaryExp {
    lhs: Box::new(Exp::BinaryExp {lhs: landexp, op: BinaryOp::Ne, rhs: Box::new(Exp::Number{num: 0})}),
    op: BinaryOp::And,
    rhs: Box::new(Exp::BinaryExp {lhs: eqexp, op: BinaryOp::Ne, rhs: Box::new(Exp::Number{num: 0})}),
  }),
}

LOrExp: Box<Exp> = {
  <landexp: LAndExp> => <>,
  <lorexp: LOrExp> "||" <landexp: LAndExp> => Box::new(Exp::BinaryExp {
    lhs: Box::new(Exp::BinaryExp {lhs: lorexp, op: BinaryOp::Ne, rhs: Box::new(Exp::Number{num: 0})}),
    op: BinaryOp::Or,
    rhs: Box::new(Exp::BinaryExp {lhs: landexp, op: BinaryOp::Ne, rhs: Box::new(Exp::Number{num: 0})}),
  }),
}

Number: i32 = <num: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}